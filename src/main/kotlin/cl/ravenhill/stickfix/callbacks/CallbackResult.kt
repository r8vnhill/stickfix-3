/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package cl.ravenhill.stickfix.callbacks

/**
 * Defines the structure for the results of callback operations within an application, encapsulating
 * the outcome in a way that allows for standardized response handling. This interface ensures that
 * all callback results
 * provide a message detailing the outcome, which aids in debugging and user feedback.
 *
 * ## Usage:
 * Implement this interface in scenarios where functions or methods return a result from a callback operation,
 * particularly when such operations can have distinctly categorized outcomes (success or failure). The message
 * included in each result provides context about the operation's outcome.
 *
 * ### Example 1: Processing Callback Results
 * ```kotlin
 * fun processCallbackResult(result: CallbackResult) {
 *     when (result) {
 *         is CallbackSuccess -> println("Operation succeeded: ${result.message}")
 *         is CallbackFailure -> println("Operation failed: ${result.message}")
 *     }
 * }
 * ```
 *
 * @property message A string that contains a descriptive message about the outcome of the callback operation.
 * This message is intended to provide insight into the success or failure of the operation, supporting better
 * understanding and traceability.
 */
interface CallbackResult {
    val message: String
}

/**
 * Represents a successful outcome of a callback operation. This class provides a specific message describing
 * the successful aspects of the callback, which can include details of what was achieved or any outputs
 * generated by the operation.
 *
 * @param message The message detailing the success of the operation, providing context and specifics of
 * the success which might be useful for logging or direct user feedback.
 */
data class CallbackSuccess(override val message: String) : CallbackResult

/**
 * Represents an unsuccessful outcome of a callback operation. This class provides a specific message that
 * explains the nature of the failure, which can assist in debugging or informing the user of the issue.
 *
 * @param message The message detailing the reason for the failure, offering insights into what went wrong
 * during the operation, which might include error codes, exception messages, or other diagnostic information.
 */
data class CallbackFailure(override val message: String) : CallbackResult

