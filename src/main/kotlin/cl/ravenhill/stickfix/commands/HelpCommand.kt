package cl.ravenhill.stickfix.commands

import cl.ravenhill.stickfix.bot.StickfixBot
import cl.ravenhill.stickfix.chat.StickfixChat
import cl.ravenhill.stickfix.commands.HelpCommand.description
import cl.ravenhill.stickfix.commands.HelpCommand.name
import kotlin.reflect.KClass

/**
 * A pre-built message containing the list of available commands in the Stickfix bot along with their descriptions.
 * This message is generated by iterating over all command subclasses and appending their names and descriptions to
 * the message.
 *
 * The message starts with a brief introduction to the Stickfix bot, explaining its functionality, followed by a list
 * of commands available to the user. Each command is listed with its name prefixed by a forward slash (`/`) and
 * followed by its description.
 */
private val helpMessage = buildString {
    appendLine("Hey, I'm Stickfix! I can help you manage stickers by associating them with custom tags.")
    appendLine("Here's a list of available commands:")

    // Recursively traverse the sealed class hierarchy to find all commands (concrete subclasses)
    fun appendCommands(subclasses: List<KClass<out Command>>) {
        subclasses.forEach { subclass ->
            // If it's a sealed class, recurse into its subclasses
            if (subclass.isSealed) {
                appendCommands(subclass.sealedSubclasses)
            }

            // If it's a concrete class (object), append its name and description
            subclass.objectInstance?.let { command ->
                appendLine("â€¢ /${command.name}: ${command.description}")
            }
        }
    }

    // Start the recursion from the top-level Command class
    appendCommands(Command::class.sealedSubclasses)
}


/**
 * Represents the Help command in the Stickfix bot, which provides users with a list of available commands and their
 * descriptions. This command is typically invoked by users seeking assistance or an overview of what the bot can do.
 *
 * @property name The name of the command, which is "help".
 * @property description A brief description of the command's functionality, specifically that it displays a list of
 *   available commands and their descriptions.
 */
data object HelpCommand : Command() {
    override val name = "help"

    override val description = "Display the list of available commands and their descriptions."

    /**
     * Sends the help message to a specified chat within the Stickfix bot application. This function is used to provide
     * the user with information about available commands and their descriptions.
     *
     * @receiver StickfixBot The bot instance used to interact with the Telegram API and manage chat interactions.
     * @param chat A `StickfixChat` instance where the help message should be sent.
     * @return `CommandResult` indicating the success or failure of sending the help message to the specified chat.
     */
    context(StickfixBot)
    operator fun invoke(chat: StickfixChat): CommandResult = sendMessage(chat, helpMessage).fold(
        ifLeft = { CommandFailure(chat, "Failed to send help message: $it") },
        ifRight = { CommandSuccess(chat, "Sent help message") }
    )
}
