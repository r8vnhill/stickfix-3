package cl.ravenhill.stickfix.bot

import cl.ravenhill.stickfix.chat.StickfixUser
import cl.ravenhill.stickfix.chat.arbUser
import cl.ravenhill.stickfix.db.StickfixDatabase
import cl.ravenhill.stickfix.db.arbStickfixDatabase
import cl.ravenhill.stickfix.db.initialized
import cl.ravenhill.stickfix.db.withApiKey
import cl.ravenhill.stickfix.db.withUsers
import io.kotest.core.spec.style.FreeSpec
import io.kotest.property.Arb
import io.kotest.property.arbitrary.bind
import io.kotest.property.arbitrary.map

class StickfixBotTest : FreeSpec({


})

/**
 * Generates an arbitrary `StickfixBot` instance with an associated `StickfixDatabase`.
 *
 * This function creates a `StickfixBot` by mapping a provided or generated `StickfixDatabase` to a `StickfixBot`
 * instance. The default behavior uses the `arbStickfixDatabase()` function to generate the `StickfixDatabase` if none
 * is provided.
 *
 * @param database An `Arb<StickfixDatabase>` representing the database instance to associate with the bot. Defaults to
 *   an arbitrary `StickfixDatabase` generated by `arbStickfixDatabase()`.
 * @return An `Arb<StickfixBot>` where the bot is initialized with the provided or generated `StickfixDatabase`.
 */
fun arbStickfixBot(
    database: Arb<StickfixDatabase> = arbStickfixDatabase()
): Arb<StickfixBot> = database.map { StickfixBot(it) }

/**
 * Generates an arbitrary pair of `StickfixBot` and `StickfixUser`.
 *
 * This function creates an arbitrary `StickfixBot` associated with a provided or generated `StickfixDatabase` and adds
 * a provided or generated `StickfixUser` to the database. The function then returns a pair containing the bot and the
 * user.
 *
 * @param database An `Arb<StickfixDatabase>` representing the database instance to associate with the bot. Defaults to
 *   an arbitrary `StickfixDatabase` generated by `arbStickfixDatabase()`.
 * @param user An `Arb<StickfixUser>` representing the user to be added to the database. Defaults to an arbitrary
 *   `StickfixUser` generated by `arbUser()`.
 * @return An `Arb<Pair<StickfixBot, StickfixUser>>` where the bot is initialized with the provided or generated
 *   `StickfixDatabase`, and the user is added to the database.
 */
fun arbStickfixBotAndUser(
    database: Arb<StickfixDatabase> = arbStickfixDatabase().initialized().withApiKey().withUsers(),
    user: Arb<StickfixUser> = arbUser()
): Arb<Pair<StickfixBot, StickfixUser>> = Arb.bind(database, user) { db, stickfixUser ->
    db.addUser(stickfixUser)
    StickfixBot(db) to stickfixUser
}
